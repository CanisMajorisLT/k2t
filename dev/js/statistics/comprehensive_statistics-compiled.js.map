{"version":3,"sources":["comprehensive_statistics.js"],"names":[],"mappings":"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","file":"comprehensive_statistics-compiled.js","sourcesContent":["let statisticFunctions = require(\"./statistics_calculation_functions-compiled\");\r\n\r\n//TODO: implamentutoi react interfacus, istestuoti ar attitinka heatmapai ir ktia rodikliai\r\n/**\r\n * @return {Array} [Object, Object] {textId: str, textLengthInWords: number, WPM: number, mistakesPerWord: number, ...wordsStatisticsCalculator}*/\r\n\r\n// keeps order of words\r\nlet gameSpecificsStats = exports.gameSpecificsStats = (statsData, trimAndClean = true) => {\r\n    var statsDataToArray = objectToArray(statsData);\r\n\r\n    return statsDataToArray.map((oneGameData)=> {\r\n        let oneGameWPM = statisticFunctions.calculateWPM(oneGameData.startTime, oneGameData.endTime, oneGameData.textLengthInWords);\r\n        let statsFromWordInput = statisticFunctions.wordsStatisticsCalculator(oneGameData.wordStats, trimAndClean = true); //wordsStatisticsCalculator_n\r\n\r\n        statsFromWordInput.gameId = oneGameData.gameId;\r\n        statsFromWordInput.textLengthInWords = oneGameData.textLengthInWords;\r\n        statsFromWordInput.WPM = oneGameWPM;\r\n        statsFromWordInput.mistakesPerWord = statsFromWordInput.totalMistakesInText / oneGameData.textLengthInWords;\r\n\r\n        return statsFromWordInput\r\n    })\r\n};\r\n\r\n// keeps order of words\r\nlet textSpecificStats = exports.textSpecificStats = (gameSpecificsStats) => {\r\n    let groupedByHashes = gameSpecificsStats.reduce((accum, current, index, array)=> {\r\n        let textId_actual = current.gameId.split(\"-\")[0];\r\n        if (!accum.hasOwnProperty(textId_actual)) {\r\n            accum[textId_actual] = [];\r\n        }\r\n\r\n        accum[textId_actual].push(current);\r\n\r\n        return accum\r\n    }, {});\r\n\r\n    return Object.keys(groupedByHashes).map((key)=> {\r\n        let games = groupedByHashes[key];\r\n        let statsOfSameTexts = {textId: key, gamesCount: games.length, words: wordsSpecificStatsForSameText(games)};\r\n        Object.assign(statsOfSameTexts, overAllStats(games));\r\n        return statsOfSameTexts\r\n    })\r\n};\r\n\r\n/**\r\n * @param {Array} ArrayOfSameTextGames This is same output as given by gameSpecificsStats, but it has to be for all games of same text.\r\n * @return {Object} {wordsMap:{[word]: [index], words: [{word: \"\", count: 0, mistakes: 0, heatMap: [], typingTime: {all: [], fastest: null}}]}}*/\r\nlet wordsSpecificStatsForSameText = exports.wordsSpecificStatsForSameText = (ArrayOfSameTextGames)=> {\r\n    return ArrayOfSameTextGames.reduce((accum, current)=> {\r\n        current.words.forEach((wordObj, index)=> {\r\n            if (accum.words[index] === undefined) {\r\n                accum.words[index] = {\r\n                    word: wordObj.word,\r\n                    count: 0,\r\n                    mistakes: 0,\r\n                    heatMap: [],\r\n                    typingTime: {all: [], fastest: null}\r\n                };\r\n\r\n                accum.wordsMap[wordObj.word] = index\r\n            }\r\n            let heatMap = wordObj.heatMap;\r\n            accum.words[index].mistakes += wordObj.mistakes;\r\n            accum.words[index].count += 1;\r\n            let FastestTypingTime = accum.words[index].typingTime.fastest;\r\n            if (!FastestTypingTime || FastestTypingTime < wordObj.typingTime) {\r\n                accum.words[index].typingTime.fastest = wordObj.typingTime\r\n            }\r\n            accum.words[index].typingTime.all.push(wordObj.typingTime);\r\n\r\n            if (accum.words[index].heatMap.length === 0) {\r\n                accum.words[index].heatMap = heatMap\r\n            }\r\n            else {\r\n                accum.words[index].heatMap.map((mistake, indexHeat) => {\r\n                    let mistake2 = heatMap[indexHeat];\r\n                    if (!mistake && !mistake2) {\r\n                        return undefined\r\n                    }\r\n                    else {\r\n                        return mistake + mistake2\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        return accum\r\n    }, {\r\n        wordsMap: {},\r\n        words: []\r\n    })\r\n};\r\n\r\n/**\r\n * @param {Array} gameSpecificsStats result of function that has this name\r\n * @return {Object} {[word]: {count: number, heatMat:[number, number, ...],\r\n *                           mistakes: number, typingTime: {all:[number, number, ...], fastest: number}}}*/\r\nlet wordsSpecificStats = exports.wordsSpecificStats = (gameSpecificsStats)=> {\r\n    return gameSpecificsStats.reduce((accum, current, index, arr) => {\r\n        current.words.forEach((wordObj) => {\r\n            var word = wordObj.word;\r\n            if (!accum.hasOwnProperty(word)) {\r\n                accum[word] = {count: 0, mistakes: 0, heatMap: [], typingTime: {all: [], fastest: wordObj.typingTime}}\r\n            }\r\n\r\n            accum[word].count += 1; //-\r\n            accum[word].mistakes += wordObj.mistakes;\r\n            accum[word].heatMap.map((mistake, index) => {\r\n                let mistake2 = wordObj.heatMap[index];\r\n                if (!mistake && !mistake2) {\r\n                    return undefined\r\n                }\r\n                else {\r\n                    return mistake + mistake2\r\n                }\r\n            });\r\n            let fastestOld = accum[word].typingTime.fastest;\r\n            let currentSpeed = wordObj.typingTime; //-\r\n            accum[word].typingTime.all.push(currentSpeed); //-\r\n            accum[word].typingTime.fastest = fastestOld < currentSpeed ? fastestOld : currentSpeed; //-\r\n\r\n\r\n        });\r\n        return accum\r\n\r\n    }, {})\r\n};\r\n\r\n/**\r\n * @return {Object} {WPM: number, totalMistakes: number, MPW: number\r\n * WPM - word per minute\r\n * MPW - mistakes per word\r\n * */\r\nlet overAllStats = exports.overAllStats = (gameSpecificsStats) => {\r\n    return gameSpecificsStats.reduce((accum, current, index, arr) => {\r\n\r\n        accum.WPM.push(current.WPM);\r\n        accum.totalMistakes.push(current.totalMistakesInText);\r\n        accum.MPW.push(current.mistakesPerWord);\r\n\r\n\r\n        if (index === (arr.length - 1)) {\r\n            accum.WPM = average(accum.WPM);\r\n            accum.totalMistakes = sum(accum.totalMistakes);\r\n            accum.MPW = average(accum.MPW);\r\n        }\r\n        return accum\r\n\r\n    }, {WPM: [], totalMistakes: [], MPW: []})\r\n};\r\n\r\n/**\r\n * @return {Array} [Object, Object, ...]*/\r\nlet objectToArray = (obj) => {\r\n    var keys = Object.keys(obj);\r\n    return keys.map((key) => {\r\n        return JSON.parse(obj[key])\r\n    })\r\n};\r\n\r\n\r\nlet sum = function (arr) {\r\n    return arr.reduce(function (s, a) {\r\n        return s + Number(a)\r\n    }, 0)\r\n};\r\n\r\nlet average = function (arr) {\r\n    return sum(arr) / (arr.length || 1)\r\n};"]}