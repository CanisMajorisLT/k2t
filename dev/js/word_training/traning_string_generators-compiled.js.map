{"version":3,"sources":["traning_string_generators.js"],"names":[],"mappings":";;;;;;;;;QAQgB,mBAAmB,GAAnB,mBAAmB;QAanB,gBAAgB,GAAhB,gBAAgB;AAjBhC,SAAS,oBAAoB,CAAC,SAAS,EAAE,EAExC;;AAEM,SAAS,mBAAmB,CAAC,IAA4C,EAAE;2BAA9C,IAA4C,CAA3C,cAAc;KAAd,cAAc,uCAAG,EAAE;sBAApB,IAA4C,CAAtB,SAAS;KAAT,SAAS,kCAAG,SAAS;;AAC9E,QAAO,SAAS,CAAC,KAAK,CACpB,MAAM,CAAC,UAAC,WAAW,EAAE,OAAO,EAAI;AAChC,MAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;AACzB,QAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;AACxC,eAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC9B;GACD;;AAED,SAAO,WAAW,CAAA;EAClB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAE,GAAG,CAAA;CAC7B;;AAEM,SAAS,gBAAgB,CAAC,KAAwD,EAAE;4BAA1D,KAAwD,CAAvD,cAAc;KAAd,cAAc,wCAAG,CAAC;kBAAnB,KAAwD,CAAnC,IAAI;KAAJ,IAAI,8BAAG,IAAI;uBAAhC,KAAwD,CAAtB,SAAS;KAAT,SAAS,mCAAG,SAAS;;AACvF,QAAO,SAAS,CAAC,KAAK,CACrB,MAAM,CAAC,UAAC,WAAW,EAAE,OAAO,EAAE,KAAK,EAAI;AACtC,MAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;AACzB,OAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACrC,OAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,AAAC,KAAK,GAAG,CAAC,IAAK,CAAC,GAAI,KAAK,GAAG,CAAC,GAAI,CAAC,EAAE,KAAK,CAAC,CAAC;AACpF,OAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;AAC9D,OAAI,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;;AAEhE,cAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;GAG/B;AACD,SAAO,WAAW,CAAA;EAClB,EAAE,EAAE,CAAC,CACL,MAAM,CAAC,UAAC,WAAW,EAAE,OAAO,EAAE,KAAK,EAAI;;AAEvC,SAAO,WAAW,IAAI,KAAK,GAAG,GAAG,GAAG,EAAE,CAAA,AAAC,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAA;EACjE,EAAE,EAAE,CAAC,GAAE,GAAG,CAAA;CACZ","file":"traning_string_generators-compiled.js","sourcesContent":["/**\r\n * Created by vyt on 2015-09-13.\r\n */\r\n\r\nfunction getWordsWithMistakes(gameStats) {\r\n\r\n}\r\n\r\nexport function wordsWithoutContext({repeatEachWord = 10, gameStats = gameStats}) {\r\n\treturn gameStats.words\r\n\t\t.reduce((accumulated, current)=> {\r\n\t\t\tif (current.mistakes > 0) {\r\n\t\t\t\tfor (let i = 0; i < repeatEachWord; i++) {\r\n\t\t\t\t\taccumulated.push(current.word)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn accumulated\r\n\t\t}, []).join(\" \").trim() +\".\"\r\n}\r\n\r\nexport function wordsWithContext({repeatEachWord = 1, text = text, gameStats = gameStats}) {\r\n\treturn gameStats.words.\r\n\t\treduce((accumulated, current, index)=> {\r\n\t\t\tif (current.mistakes > 0) {\r\n\t\t\t\tlet textWord = text.textWords[index];\r\n\t\t\t\tlet contextBefore = text.textWords.slice((index - 3) >= 0 ? (index - 3) : 0, index);\r\n\t\t\t\tlet contextAfter = text.textWords.slice(index + 1, index + 4);\r\n\t\t\t\tlet stringToMake = contextBefore.concat(textWord, contextAfter);\r\n\r\n\t\t\t\taccumulated.push(stringToMake);\r\n\r\n\r\n\t\t\t}\r\n\t\t\treturn accumulated\r\n\t\t}, [])\r\n\t\t.reduce((accumulated, current, index)=> {\r\n\t\t\t// need to change \" \" with new line\r\n\t\t\treturn accumulated + (index ? \" \" : \"\") + current.join(\"\").trim()\r\n\t\t}, \"\") +\".\"\r\n}\r\n\r\n\r\n\r\n"]}